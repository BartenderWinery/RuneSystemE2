####*  Made By Runic, 30.12.2021
######* Arx Fatalis Runes
####*  Have fun with it!

# Name
@name Arx Fatalis Rune Spells

# Rune Enums
@persist [RUNE_AAM RUNE_VITAE RUNE_YOK RUNE_RHAA RUNE_MEGA RUNE_VISTA RUNE_TAAR]

# Dir Enums
@persist [AUP AUPRIGHT ARIGHT ADOWNRIGHT ADOWN ADOWNLEFT ALEFT AUPLEFT]

# Numbers 
@persist [INIT_Num DEBUG MAX_POINTS Unreachable FirstPoint DRAWPOINT LEARNING]

# Arrays, Tables
@persist [INIT_Arr PList]:array [DIR_ENUM INIT_Tbl RunePattern SpellMoves LastSpell]:table

# Strings
@persist [INIT_Str Runes]:string

# Entities
@persist [INIT_Ent SUMMON Chair1 Chair2]:entity

##### START FIRST #####
if(first()){
    # Tell People how it works
    hint("Hold C then draw runes with Mouse1",2)
    
    # DEBUG: turn this on for more info.
    DEBUG = 0
    LEARNING = 0
    
    #### DIR ENUMS ####
    AUP             = 0
    AUPRIGHT        = 1
    ARIGHT          = 2
    ADOWNRIGHT      = 3
    ADOWN           = 4
    ADOWNLEFT       = 5
    ALEFT           = 6
    AUPLEFT         = 7
    ###################
    
    ###  RUNE ENUMS ###
    RUNE_AAM        = 1
    RUNE_VITAE      = 2
    RUNE_YOK        = 3
    RUNE_RHAA       = 4
    RUNE_MEGA       = 5
    RUNE_VISTA      = 6
    RUNE_TAAR       = 7
    ###################

    # Vars
    MAX_POINTS = 32
    DRAWPOINT = 1
    Runes = ""
    
    # Init
    FirstPoint = 1
    
    ##### START FUNCTIONS #####
    

    # Unreachable
    function arx_unreachable(){
        # Do Nothing
    }
    
    # Make Rune
    function makeSpell(Pat:string){
        local Valid = 0
        if(Pat == ""+RUNE_AAM+RUNE_YOK){
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,"models/props_combine/breenglobe.mdl")
            holoEntity(803):ignite(999)
            holoPos(803,owner():aimPos())  
            holoParent(803,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_MEGA){
            Chair1:propDelete()
            Chair1 = seatSpawn("models/nova/airboat_seat.mdl",1)
            Chair1:setAlpha(0)
            holoDelete(844)
            holoCreate(844)
            holoModel(844,"hq_sphere")
            holoMaterial(844,"models/props_combine/tpballglow")
            holoColor(844,vec4(111,255,111,254))
            holoPos(844,owner():aimPos()+vec(0,0,50))
            holoScale(844,vec(4,4,6))
            holoParent(844,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_RHAA){
            Chair2:propDelete()
            Chair2 = seatSpawn("models/nova/airboat_seat.mdl",1)
            Chair2:setAlpha(0)
            holoDelete(845)
            holoCreate(845)
            holoModel(845,"hq_sphere")
            holoMaterial(845,"models/props_combine/tpballglow")
            holoColor(845,vec4(255,155,111,254))
            holoPos(845,owner():aimPos()+vec(0,0,50))
            holoScale(845,vec(4,4,6))
            holoParent(845,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_YOK){
            local PAR = owner():aimEntity()
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,PAR:model())
            holoEntity(803):ignite(999)
            holoPos(803,PAR:pos())
            holoAng(803,PAR:angles())
            holoParent(803,PAR)   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_YOK+RUNE_MEGA){
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,"models/hunter/blocks/cube8x8x4.mdl")
            holoEntity(803):ignite(999)
            holoPos(803,owner():aimPos())  
            holoParent(803,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_VISTA+RUNE_RHAA){
            
            holoDelete(803)
            holoCreate(803)
            
            holoModel(803,"models/hunter/misc/sphere2x2.mdl")
holoMaterial(803,"engine/depthwrite")
            holoPos(803,owner():aimPos())
            holoScale(803,vec(155))
            holoParent(803,owner():aimEntity())   

            Valid = 1       
        }
        if(Pat == ""+RUNE_RHAA+RUNE_MEGA){
            concmd("say TEST BIND BOUND BY RHAA MEGA RUNES")
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE){
            owner():plySetPos(owner():aimPos())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_RHAA){
            propSpawn("models/props_phx/torpedo.mdl",owner():aimPos(),ang(0,0,0),1):propBreak() 
            Valid = 1       
        }
        if(Pat == ""+RUNE_VITAE+RUNE_MEGA){
            owner():plySetSpeed(400)  
            Valid = 1       
        }
        if(Pat == ""+RUNE_VITAE+RUNE_RHAA){
            owner():plySetSpeed(200)  
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_YOK+RUNE_TAAR){
            AimPos = owner():aimPos()
            SUMMON:propDelete()
            SUMMON = propSpawn("models/hunter/blocks/cube2x2x2.mdl",ang(0,0,0),1)
            noCollide(SUMMON,owner())
            SUMMON:setAlpha(0)
            SUMMON:setTrails(100,44,4,"trails/laser",vec(255,155,55),255)
            SUMMON:setPos(owner():shootPos())
            SUMMON:setMass(444)
            SUMMON:propFreeze(0)
            SUMMON:applyForce(((owner():aimPos()-owner():shootPos())*(SUMMON:mass()*11))) 
            SUMMON:ignite()
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_TAAR){
            AimPos = owner():aimPos()
            SUMMON:propDelete()
            SUMMON = propSpawn("models/props_c17/oildrum001_explosive.mdl",ang(0,0,0),1)
            noCollide(SUMMON,owner())
            SUMMON:setAlpha(0)
            SUMMON:setTrails(100,44,4,"trails/laser",vec(55,255,155),255)
            SUMMON:setPos(owner():shootPos())
            SUMMON:setMass(50000)
            SUMMON:propFreeze(0)
            SUMMON:applyForce(((owner():aimPos()-owner():shootPos())*(SUMMON:mass()*5))) 
            Valid = 1       
        }
        if(Valid){
            # Sound       
            soundStop(3)
            holoCreate(802)
            holoAlpha(802,0)
            holoPos(802,owner():toWorld(vec(0,0,owner():height()/2)))
            holoEntity(802):soundPlay(3,0,"ambient/atmosphere/cave_hit2.wav")
            soundPitch(3,randint(175,255))
        }
    }
    function makeRune(R){
        
        # Cursor Trace Pos
        FirePos = owner():eyeTraceCursor():pos()
        
        # Sound
        soundStop(2)
        holoCreate(801)
        holoAlpha(801,0)
        
        holoPos(801,owner():toWorld(vec(0,0,owner():height()/2)))
        local Sound1 = "ambient/hallow0"+randint(4,8)+".wav"

        holoEntity(801):soundPlay(2,0,Sound1)
        soundPitch(2,70)
        soundVolume(2,0.4)

        # Rune Functions
        if(R == RUNE_AAM){
            printColor(vec(255,255,155),"AAM!")
        }
        if(R == RUNE_RHAA){
            printColor(vec(255,255,155),"RHAA!")
        }
        if(R == RUNE_MEGA){
            printColor(vec(255,255,155),"MEGA!")
        }
        if(R == RUNE_VITAE){
            printColor(vec(255,255,155),"VITAE!")
        }
        if(R == RUNE_YOK){
            printColor(vec(255,255,155),"YOK!")
        }
        if(R == RUNE_VISTA){
            printColor(vec(255,255,155),"VISTA!")
        }
        if(R == RUNE_TAAR){
            printColor(vec(255,255,155),"TAAR!")
        }
        Runes = Runes + R
    }
    
    # Add Point
    function addpoint(Pos:vector){
        # If PList is empty, return
        if(!PList:count() == 0 && Pos == PList[PList:count(),vector]){
            return
        }
        
        # If the Max Point Size has been reached, pop back
        if(PList:count() >= MAX_POINTS){
            PList:pop()
        }
        
        # Lastly, push in the new point.
        PList:pushVector(Pos)
    }
    
    # Dot
    function number length2(VEC:vector){
        return VEC:dot(VEC)
    }
    
    # Angles to Arx dirs    
    function number angle2arx(DIR){
        switch(DIR){
            case 0, return 6
            case 1, return 9
            case 2, return 8
            case 3, return 7
            case 4, return 4
            case 5, return 1
            case 6, return 2
            case 7, return 3
            default, arx_unreachable()
        }
    }
    
    # Arx dirs to angles
    function number arx2angle(DIR:string){
        switch(DIR){
            case "6", return 0
            case "9", return 1
            case "8", return 2
            case "7", return 3
            case "4", return 4
            case "1", return 5
            case "2", return 6
            case "3", return 7
            default, arx_unreachable()
        }
    }
    
    # Analysis
    function analyze(){
        ## Vars
        local DIRS = array()
        local Lastdir = 255
        local CDIR = 0

        ## Code 
        for(I=1,PList:count()){
            # From Old point to New Point
            local D = PList[I-1,vector] - PList[I,vector]

            # If the two points are spaced enough apart...
            if(length2(D) > 0.1){  
                # Define A and B absolute values of X and Y        
                local A = abs(D:x())
                local B = abs(D:z())
                if(B != 0 && A / B > 0.5 && A / B < 1){   #  /
                    if(D:x() < 0 && D:z() < 0){
                        if(Lastdir != ADOWNRIGHT){
                            Lastdir = ADOWNRIGHT
                            CDIR++
                            DIRS[CDIR,number] = ADOWNRIGHT
                        }
                    }elseif(D:x() > 0 && D:z() < 0){
                        if(Lastdir != ADOWNLEFT){
                            Lastdir = ADOWNLEFT
                            CDIR++
                            DIRS[CDIR,number] = ADOWNLEFT
                        }
                    }elseif(D:x() < 0 && D:z() > 0){
                        if(Lastdir != AUPRIGHT){
                            Lastdir = AUPRIGHT
                            CDIR++
                            DIRS[CDIR,number] = AUPRIGHT
                        }                    
                    }elseif(D:x() > 0 && D:z() > 0){
                        if(Lastdir != AUPLEFT){
                            Lastdir = AUPLEFT
                            CDIR++
                            DIRS[CDIR,number] = AUPLEFT
                        }                        
                    }
                }elseif(A > B){                             # <->
                    if(D:x() < 0){
                        if(Lastdir != ARIGHT){
                            Lastdir = ARIGHT
                            CDIR++
                            DIRS[CDIR,number] = ARIGHT
                        }
                    }else{
                        if(Lastdir != ALEFT){
                            Lastdir = ALEFT
                            CDIR++
                            DIRS[CDIR,number] = ALEFT
                        } 
                    }
                }else{                                      #  |
                    if(D:z() < 0){
                        if(Lastdir != ADOWN){
                            Lastdir = ADOWN
                            CDIR++
                            DIRS[CDIR,number] = ADOWN
                        }
                    }else{
                        if(Lastdir != AUP){
                            Lastdir = AUP
                            CDIR++
                            DIRS[CDIR,number] = AUP
                        } 
                    }               
                }
                
            }
        }
        LastSpell = SpellMoves
        SpellMoves:clear()
        if(CDIR > 0){
            for(I=0,CDIR){
                switch(DIRS[I,number]){
                    case AUP, SpellMoves:pushNumber(8) break
                    case ADOWN, SpellMoves:pushNumber(2) break
                    case ALEFT, SpellMoves:pushNumber(4) break
                    case ARIGHT, SpellMoves:pushNumber(6) break
                    case AUPRIGHT, SpellMoves:pushNumber(9) break
                    case ADOWNRIGHT, SpellMoves:pushNumber(3) break
                    case AUPLEFT, SpellMoves:pushNumber(7) break
                    case ADOWNLEFT, SpellMoves:pushNumber(1) break
                }
            }
        }
    }    
    
    # Register Rune Pattern
    function regRune(RUNE:string,PATTERN:string){
        RunePattern["PatternData",table][RUNE,string] = PATTERN
    }
    ##### END FUNCTIONS #####

    
    ##### START DEBUG FIRST #####
    if(DEBUG == 1){
        # Print rune patterns
        foreach(K, V:string = RunePattern["PatternData",table]){
            printColor(vec(255,255,155),K,V)
        }
    }
    ##### END DEBUG FIRST #####
    
    # INIT ANALYSIS
    timer("analysis",1)
    
    # INIT FLARES
    timer("drawpoints",1)
    
    # INIT PORTAL CODE
    timer("portals",1)
}
##### END FIRST #####

##### START TIMERS #####

# Analysis
if(clk("analysis")){   
    # Keys!
    local MOUSE1 = owner():keyAttack1()
    local C = owner():keyPressed("c")
    # Mouse1 is being held down
    if(C && MOUSE1 && perf()){
        # Flags W so we dont accidently hit entities
        rangerFlags("W")
        
        # Transform the ranger worldpos to local
        local PX = owner():toLocal(rangerOffset(11, owner():shootPos(), owner():eye()):pos())
        
        # Add the point
        addpoint(PX)
    }
    
    # C is being clicked or let go
    if(changed(C)){
        if(C){
            # Sound Holo
            holoCreate(800)
            holoAlpha(800,0)
            holoPos(800,owner():toWorld(vec(0,0,owner():height()/2)))
            holoParent(800,owner())
            # Actual Sound
            holoEntity(800):soundPlay(1,0,"ambient/levels/citadel/citadel_drone_loop1.wav")
            soundPitch(1,155)
            soundVolume(1,0.8)

        }else{       
            # Stop sound, remove trail
            soundStop(1)
            makeSpell(Runes)
            Runes = ""
        }
    }
    
    # Mouse1 is being clicked or let go
    if(changed(MOUSE1)){
        if(MOUSE1 && C){
            # Create flare holo
            holoCreate(977)
            rangerFlags("W")
            holoPos(977,rangerOffset(55, owner():shootPos(), owner():eye()):pos()+vec(0,0,5))
            holoAlpha(977,0)
            
            # Cycle Color
            local Col = hsv2rgb(((curtime() * 33)+(1*3)),1,1)
            
            # Add trail so we can see the path
            holoEntity(977):setTrails(32,5,4,"trails/laser",Col,255)
        }else{
            # Mouse1 is unclicked, remove drawer holo!
            holoEntity(977):removeTrails()
            holoDelete(977)
            
            # Analyze Rune Drawn
            analyze()
            
            # Clear Points
            PList:clear()
            
            # Last 3 occurences of Analyzer
            local Analyzer = LastSpell:concat(""):sub(LastSpell:count()-7,LastSpell:count())
            
            # Delete Flares
            for(I=0,798){
                holoDelete(I)
            }
            
            ### Rune Definitions ###
            
            if(LEARNING){
                printColor(vec(255,255,155),Analyzer)        # Print Pattern
            }
            
            # Complex
            if(Analyzer:sub(Analyzer:length(),Analyzer:length()) == "2" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "3"){
                if(Analyzer:sub(1,4) == "8286"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8287"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8763"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "2879"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "2869"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8769"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8289"){makeRune(RUNE_YOK)}

            }
            if(Analyzer:sub(Analyzer:length(),Analyzer:length()) == "2" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "1" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "4"){
                if(Analyzer:sub(1,5) == "82689"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,4) == "8281"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "632"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "642"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "624"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "214"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "684"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "674"){makeRune(RUNE_TAAR)}

            }
            if(Analyzer:sub(Analyzer:length()-3,Analyzer:length()) == "4698" || Analyzer:sub(Analyzer:length()-3,Analyzer:length()) == "9874" || Analyzer:sub(Analyzer:length()-3,Analyzer:length()) ==  "8687"){
                    if(Analyzer:sub(1,4) == "8298"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "8287"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "2987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "6987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "874"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "874"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "4848"){makeRune(RUNE_VISTA)}
            }
            # Simple
            switch(Analyzer){
                case "826", makeRune(RUNE_AAM) break       # AAM [ RIGHT ]
                case "262", makeRune(RUNE_VITAE) break     # VITAE [ RIGHT UP ] 
                case "828", makeRune(RUNE_RHAA) break      # RHAA [ DOWN ]
                case "82", makeRune(RUNE_MEGA) break       # MEGA [ UP ]
                case "86", makeRune(RUNE_TAAR) break       # TAAR
            }
            
        }
    }
    
    # Loop
    timer("analysis",32)
}

# Draw Flares
if(clk("drawpoints")){
    
    local MOUSE1 = owner():keyAttack1()
    local C = owner():keyPressed("c")
    
    # When Mouse1 is held....
    if(MOUSE1 && C && perf(7)){
        # Move Holo to Path
        rangerFlags("W")
        holoPos(977,rangerOffset(55, owner():shootPos(), owner():eye()):pos()+vec(0,0,5))
    }
    
    # Loop
    timer("drawpoints",1)
}

# Check Portals
if(clk("portals")){
    # PORTAL 1
    local PORTAL1 = holoEntity(844)
    local PORTAL2 = holoEntity(845)
    if(Chair1:driver():isPlayer()){
        Chair1:setPos(PORTAL2:pos())
    }else{
        Chair1:setPos(PORTAL1:pos())
        Chair1:setAng(PORTAL1:angles())      
    }
    if(Chair1:pos():distance(PORTAL2:pos()) < 180){
        Chair1:ejectPod()
        Chair1:setPos(PORTAL1:pos())
        Chair1:setAng(PORTAL1:angles())
    }
    
    # PORTAL 2    
    if(Chair2:driver():isPlayer()){
        Chair2:setPos(PORTAL1:pos())
    }else{
        Chair2:setPos(PORTAL2:pos())
        Chair2:setAng(PORTAL2:angles())
        
    }
    if(Chair2:pos():distance(PORTAL1:pos()) < 180){
        Chair2:ejectPod()
        Chair2:setPos(PORTAL2:pos())
        Chair2:setAng(PORTAL2:angles())
    }
    timer("portals",1)
}
##### END TIMERS #####

#[

NOTES:

> is to the right
^ is up

One can get the dirs from the eye dir as such:

#local X = owner():eye():y() # >
#local Y = owner():eye():z() # ^

]#
