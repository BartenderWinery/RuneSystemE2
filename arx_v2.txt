####*  Made By Runic, 30.12.2021
######* Arx Fatalis Runes
####*  Have fun with it!

# Name
@name Arx Fatalis Rune Spells

# Rune Enums
@persist [RUNE_AAM RUNE_VITAE RUNE_YOK RUNE_RHAA RUNE_MEGA RUNE_VISTA RUNE_TAAR]

# Dir Enums
@persist [AUP AUPRIGHT ARIGHT ADOWNRIGHT ADOWN ADOWNLEFT ALEFT AUPLEFT]

# Numbers 
@persist [INIT_Num DEBUG MAX_POINTS Unreachable FirstPoint DRAWPOINT LEARNING ExploIncrement]

# Arrays, Tables
@persist [INIT_Arr PList]:array [DIR_ENUM INIT_Tbl RunePattern SpellMoves LastSpell]:table

# Strings
@persist [INIT_Str Runes]:string

# Entities
@persist [INIT_Ent SUMMON Chair1 Chair2]:entity

# Vectors
@persist [INIT_Vec Shootpos]:vector

#ifdef webAudio(string)
@persist [RuneAudio RuneLoopAudio]:webaudio
#endif

##### START FIRST #####
if(first()){
    # Tell People how it works
    hint("Hold C then draw runes with Mouse1",2)
    
    # DEBUG: turn this on for more info.
    DEBUG = 0
    LEARNING = 0
    
    #### DIR ENUMS ####
    AUP             = 0
    AUPRIGHT        = 1
    ARIGHT          = 2
    ADOWNRIGHT      = 3
    ADOWN           = 4
    ADOWNLEFT       = 5
    ALEFT           = 6
    AUPLEFT         = 7
    ###################
    
    ###  RUNE ENUMS ###
    RUNE_AAM        = 1
    RUNE_VITAE      = 2
    RUNE_YOK        = 3
    RUNE_RHAA       = 4
    RUNE_MEGA       = 5
    RUNE_VISTA      = 6
    RUNE_TAAR       = 7
    ###################

    # Vars
    MAX_POINTS = 32
    DRAWPOINT = 1
    Runes = ""
    
    # Init
    FirstPoint = 1
    
    ##### START FUNCTIONS #####
    

    # Unreachable
    function arx_unreachable(){
        # Do Nothing
    }
    
    # Make Explosion at pos 
    function explo(VPos:vector){
        # If we can spawn a prop, dew it, if not, engage re-looping
        if(propCanCreate()){
            propSpawn("models/props_phx/torpedo.mdl",VPos,ang(0,0,0),1):propBreak()
        }else{
            local Line = "re_explo;"+VPos:x()+";"+VPos:y()+";"+VPos:z()
            timer(Line,1)
        }
    }
    
    # Make Rune
    function makeSpell(Pat:string){
        local Valid = 0
        if(Pat == ""+RUNE_AAM+RUNE_YOK){
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,"models/props_combine/breenglobe.mdl")
            holoEntity(803):ignite(999)
            holoPos(803,owner():aimPos())  
            holoParent(803,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_MEGA){
            Chair1:propDelete()
            Chair1 = seatSpawn("models/nova/airboat_seat.mdl",1)
            Chair1:setAlpha(0)
            holoDelete(844)
            holoCreate(844)
            holoModel(844,"hq_sphere")
            holoMaterial(844,"models/props_combine/tpballglow")
            holoColor(844,vec4(111,255,111,254))
            holoPos(844,owner():aimPos()+vec(0,0,50))
            holoScale(844,vec(4,4,6))
            holoParent(844,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_RHAA){
            Chair2:propDelete()
            Chair2 = seatSpawn("models/nova/airboat_seat.mdl",1)
            Chair2:setAlpha(0)
            holoDelete(845)
            holoCreate(845)
            holoModel(845,"hq_sphere")
            holoMaterial(845,"models/props_combine/tpballglow")
            holoColor(845,vec4(255,155,111,254))
            holoPos(845,owner():aimPos()+vec(0,0,50))
            holoScale(845,vec(4,4,6))
            holoParent(845,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE+RUNE_YOK){
            local PAR = owner():aimEntity()
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,PAR:model())
            holoEntity(803):ignite(999)
            holoPos(803,PAR:pos())
            holoAng(803,PAR:angles())
            holoParent(803,PAR)   
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_YOK+RUNE_MEGA){
            holoDelete(803)
            holoCreate(803)
            holoAlpha(803,0)
            holoModel(803,"models/hunter/blocks/cube8x8x4.mdl")
            holoEntity(803):ignite(999)
            holoPos(803,owner():aimPos())  
            holoParent(803,owner():aimEntity())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_VISTA+RUNE_RHAA){
            
            holoDelete(837)
            holoCreate(837)
            
            holoModel(837,"models/hunter/misc/sphere2x2.mdl")
holoMaterial(837,"engine/depthwrite")
            holoPos(837,owner():aimPos())
            holoScale(837,vec(155))
            holoParent(837,owner():aimEntity())   

            Valid = 1       
        }
        if(Pat == ""+RUNE_RHAA+RUNE_MEGA){
            concmd("say TEST BIND BOUND BY RHAA MEGA RUNES")
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_VITAE){
            owner():plySetPos(owner():aimPos())   
            Valid = 1       
        }
        if(Pat == ""+RUNE_RHAA){
            propSpawn("models/props_phx/torpedo.mdl",owner():aimPos(),ang(0,0,0),1):propBreak() 
            Valid = 1       
        }
        if(Pat == ""+RUNE_VITAE+RUNE_MEGA){
            owner():plySetSpeed(400)  
            Valid = 1       
        }
        if(Pat == ""+RUNE_VITAE+RUNE_RHAA){
            owner():plySetSpeed(200)  
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_YOK+RUNE_TAAR){
            Shootpos = owner():aimPos()
            holoCreate(777)
            holoEntity(777):setTrails(100,2,1,"trails/laser",vec(255,155,11), 255)  
            holoModel(777,"hq_sphere")
            holoPos(777,owner():shootPos())
            holoAng(777,owner():eyeAngles())
            holoDisableShading(777,1)
            holoColor(777,vec(255,155,11))
            holoScale(777,vec(2,0.3,0.3))    
            holoEntity(777):ignite()
            Valid = 1       
        }
        if(Pat == ""+RUNE_AAM+RUNE_TAAR){
            Shootpos = owner():aimPos()
            local BIAS = 1.2
            for(I=777,785){
                holoCreate(I)
                holoEntity(I):setTrails(100,2,0.3,"trails/laser",vec(11,255,155), 255)  
                holoModel(I,"hq_sphere")
                holoPos(I,owner():shootPos())
                holoAng(I,owner():eyeAngles()+ang(randint(-BIAS,BIAS),randint(-BIAS,BIAS),randint(-BIAS,BIAS)))
                holoDisableShading(I,1)
                holoColor(I,vec(11,255,155))
                holoScale(I,vec(2,0.3,0.3))
            }
            Valid = 1    
        }
        if(Pat == ""+RUNE_AAM+RUNE_YOK+RUNE_TAAR+RUNE_MEGA){
            Shootpos = owner():aimPos()
            local BIAS = 3
            for(I=773,790){
                holoCreate(I)
                holoEntity(I):setTrails(255,2,0.5,"trails/laser",vec(255,155,11), 255)  
                holoModel(I,"hq_sphere")
                holoPos(I,owner():shootPos())
                holoAng(I,owner():eyeAngles()+ang(randint(-BIAS,BIAS),randint(-BIAS,BIAS),randint(-BIAS,BIAS)))
                holoDisableShading(I,1)
                holoColor(I,vec(255,155,11))
                holoScale(I,vec(2,0.3,0.3))
            }
            Valid = 1    
        }
        if(Pat == ""+RUNE_TAAR){
            Shootpos = owner():aimPos()
            local BIAS = 1.2
            for(I=777,780){
                holoCreate(I)
                holoEntity(I):setTrails(100,2,0.3,"trails/laser",vec(11,255,155), 255)  
                holoModel(I,"hq_sphere")
                holoPos(I,owner():shootPos())
                holoAng(I,owner():eyeAngles()+ang(randint(-BIAS,BIAS),randint(-BIAS,BIAS),randint(-BIAS,BIAS)))
                holoDisableShading(I,1)
                holoColor(I,vec(11,255,155))
                holoScale(I,vec(2,0.3,0.3))
            }
            Valid = 1       
        }
        if(Valid){
            # Sound       
            soundStop(3)
            holoCreate(802)
            holoAlpha(802,0)
            holoPos(802,owner():toWorld(vec(0,0,owner():height()/2)))
            holoEntity(802):soundPlay(3,0,"ambient/atmosphere/cave_hit2.wav")
            soundPitch(3,randint(175,255))
        }else{
            #ifdef webAudio(string)
                RuneAudio:destroy()
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/fizzle.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            #endif
        }
    }
    function makeRune(R){
        
        # Cursor Trace Pos
        FirePos = owner():eyeTraceCursor():pos()
        
        # Sound
        soundStop(2)
        holoCreate(801)
        holoAlpha(801,0)
        
        holoPos(801,owner():toWorld(vec(0,0,owner():height()/2)))
        local Sound1 = "ambient/hallow0"+randint(4,8)+".wav"
        
        # IF NOT IJWTB Webaudio Compatibility, play whispers...
        #ifndef webAudio(string)
        
            holoEntity(801):soundPlay(2,0,Sound1)
            soundPitch(2,70)
            soundVolume(2,0.4)
            
            # Rune Functions
            if(R == RUNE_AAM){
                printColor(vec(255,255,155),"AAM!")
            }
            if(R == RUNE_RHAA){
                printColor(vec(255,255,155),"RHAA!")
            }
            if(R == RUNE_MEGA){
                printColor(vec(255,255,155),"MEGA!")
            }
            if(R == RUNE_VITAE){
                printColor(vec(255,255,155),"VITAE!")
            }
            if(R == RUNE_YOK){
                printColor(vec(255,255,155),"YOK!")
            }
            if(R == RUNE_VISTA){
                printColor(vec(255,255,155),"VISTA!")
            }
            if(R == RUNE_TAAR){
                printColor(vec(255,255,155),"TAAR!")
            }
            
        # ...else play actual arx fatalis MP3s!
        #else
        
            # Rune Functions
            if(R == RUNE_AAM){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"AAM!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/aam.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_RHAA){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"RHAA!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/rhaa.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_MEGA){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"MEGA!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/mega.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_VITAE){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"VITAE!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/vitae.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_YOK){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"YOK!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/yok.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_VISTA){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"VISTA!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/vista.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
            if(R == RUNE_TAAR){
                RuneAudio:destroy()
                printColor(vec(255,255,155),"TAAR!")
                RuneAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/taar.mp3")
                RuneAudio:setPos(owner():pos())
                RuneAudio:play()
            }
        #endif
        Runes = Runes + R
    }
    
    # Add Point
    function addpoint(Pos:vector){
        # If PList is empty, return
        if(!PList:count() == 0 && Pos == PList[PList:count(),vector]){
            return
        }
        
        # If the Max Point Size has been reached, pop back
        if(PList:count() >= MAX_POINTS){
            PList:pop()
        }
        
        # Lastly, push in the new point.
        PList:pushVector(Pos)
    }
    
    # Dot
    function number length2(VEC:vector){
        return VEC:dot(VEC)
    }
    
    # Angles to Arx dirs    
    function number angle2arx(DIR){
        switch(DIR){
            case 0, return 6
            case 1, return 9
            case 2, return 8
            case 3, return 7
            case 4, return 4
            case 5, return 1
            case 6, return 2
            case 7, return 3
            default, arx_unreachable()
        }
    }
    
    # Arx dirs to angles
    function number arx2angle(DIR:string){
        switch(DIR){
            case "6", return 0
            case "9", return 1
            case "8", return 2
            case "7", return 3
            case "4", return 4
            case "1", return 5
            case "2", return 6
            case "3", return 7
            default, arx_unreachable()
        }
    }
    
    # Analysis
    function analyze(){
        ## Vars
        local DIRS = array()
        local Lastdir = 255
        local CDIR = 0

        ## Code 
        for(I=1,PList:count()){
            # From Old point to New Point
            local D = PList[I-1,vector] - PList[I,vector]

            # If the two points are spaced enough apart...
            if(length2(D) > 0.1){  
                # Define A and B absolute values of X and Y        
                local A = abs(D:x())
                local B = abs(D:z())
                if(B != 0 && A / B > 0.5 && A / B < 1){   #  /
                    if(D:x() < 0 && D:z() < 0){
                        if(Lastdir != ADOWNRIGHT){
                            Lastdir = ADOWNRIGHT
                            CDIR++
                            DIRS[CDIR,number] = ADOWNRIGHT
                        }
                    }elseif(D:x() > 0 && D:z() < 0){
                        if(Lastdir != ADOWNLEFT){
                            Lastdir = ADOWNLEFT
                            CDIR++
                            DIRS[CDIR,number] = ADOWNLEFT
                        }
                    }elseif(D:x() < 0 && D:z() > 0){
                        if(Lastdir != AUPRIGHT){
                            Lastdir = AUPRIGHT
                            CDIR++
                            DIRS[CDIR,number] = AUPRIGHT
                        }                    
                    }elseif(D:x() > 0 && D:z() > 0){
                        if(Lastdir != AUPLEFT){
                            Lastdir = AUPLEFT
                            CDIR++
                            DIRS[CDIR,number] = AUPLEFT
                        }                        
                    }
                }elseif(A > B){                             # <->
                    if(D:x() < 0){
                        if(Lastdir != ARIGHT){
                            Lastdir = ARIGHT
                            CDIR++
                            DIRS[CDIR,number] = ARIGHT
                        }
                    }else{
                        if(Lastdir != ALEFT){
                            Lastdir = ALEFT
                            CDIR++
                            DIRS[CDIR,number] = ALEFT
                        } 
                    }
                }else{                                      #  |
                    if(D:z() < 0){
                        if(Lastdir != ADOWN){
                            Lastdir = ADOWN
                            CDIR++
                            DIRS[CDIR,number] = ADOWN
                        }
                    }else{
                        if(Lastdir != AUP){
                            Lastdir = AUP
                            CDIR++
                            DIRS[CDIR,number] = AUP
                        } 
                    }               
                }
                
            }
        }
        LastSpell = SpellMoves
        SpellMoves:clear()
        if(CDIR > 0){
            for(I=0,CDIR){
                switch(DIRS[I,number]){
                    case AUP, SpellMoves:pushNumber(8) break
                    case ADOWN, SpellMoves:pushNumber(2) break
                    case ALEFT, SpellMoves:pushNumber(4) break
                    case ARIGHT, SpellMoves:pushNumber(6) break
                    case AUPRIGHT, SpellMoves:pushNumber(9) break
                    case ADOWNRIGHT, SpellMoves:pushNumber(3) break
                    case AUPLEFT, SpellMoves:pushNumber(7) break
                    case ADOWNLEFT, SpellMoves:pushNumber(1) break
                }
            }
        }
    }    
    
    # Register Rune Pattern
    function regRune(RUNE:string,PATTERN:string){
        RunePattern["PatternData",table][RUNE,string] = PATTERN
    }
    ##### END FUNCTIONS #####

    
    ##### START DEBUG FIRST #####
    if(DEBUG == 1){
        # Print rune patterns
        foreach(K, V:string = RunePattern["PatternData",table]){
            printColor(vec(255,255,155),K,V)
        }
    }
    ##### END DEBUG FIRST #####
    
    # INIT ANALYSIS
    timer("analysis",1)
    
    # INIT FLARES
    timer("drawpoints",1)
    
    # INIT PORTAL CODE
    timer("portals",1)
    
    # INIT PROJECTILE LOOP
    timer("projectiles",1)
}
##### END FIRST #####

##### START TIMERS #####

# Analysis
if(clk("analysis")){   
    # Keys!
    local MOUSE1 = owner():keyAttack1()
    local C = owner():keyPressed("c")
    # Mouse1 is being held down
    if(C && MOUSE1 && perf()){
        # Flags W so we dont accidently hit entities
        rangerFlags("W")
        
        # Transform the ranger worldpos to local
        local PX = owner():toLocal(rangerOffset(11, owner():shootPos(), owner():eye()):pos())
        
        # Add the point
        addpoint(PX)
    }
    
    # C is being clicked or let go
    if(changed(C)){
        if(C){
            # Sound Holo
            holoCreate(800)
            holoAlpha(800,0)
            holoPos(800,owner():toWorld(vec(0,0,owner():height()/2)))
            holoParent(800,owner())
            # Actual Sound
            #ifdef webAudio(string)
                RuneLoopAudio:destroy()
                RuneLoopAudio = webAudio("https://raw.githubusercontent.com/Groovemaker/GroovesOpenSourceE2s/master/Sounds/ambient.mp3")
                RuneLoopAudio:setPos(holoEntity(800):pos())
                RuneLoopAudio:setParent(holoEntity(800))
                RuneLoopAudio:play()
            #else
                holoEntity(800):soundPlay(1,0,"ambient/levels/citadel/citadel_drone_loop1.wav")
                soundPitch(1,155)
                soundVolume(1,0.8)
            #endif

        }else{       
            # Stop sound, remove trail
            
            #ifdef webAudio(string)
                RuneLoopAudio:destroy()
            #else
                soundStop(1)
            #endif
            makeSpell(Runes)
            Runes = ""
        }
    }
    
    # Mouse1 is being clicked or let go
    if(changed(MOUSE1)){
        if(MOUSE1 && C){
            # Create flare holo
            holoCreate(977)
            rangerFlags("W")
            holoPos(977,rangerOffset(55, owner():shootPos(), owner():eye()):pos()+vec(0,0,5))
            holoAlpha(977,0)
            
            # Cycle Color
            local Col = hsv2rgb(((curtime() * 33)+(1*3)),1,1)
            
            # Add trail so we can see the path
            holoEntity(977):setTrails(32,5,4,"trails/laser",Col,255)
        }else{
            # Mouse1 is unclicked, remove drawer holo!
            holoEntity(977):removeTrails()
            holoDelete(977)
            
            # Analyze Rune Drawn
            analyze()
            
            # Clear Points
            PList:clear()
            
            # Last 3 occurences of Analyzer
            local Analyzer = LastSpell:concat(""):sub(LastSpell:count()-7,LastSpell:count())
            
            ### Rune Definitions ###
            #printColor(vec(255,255,155),Analyzer)        # Print Pattern
            
            # Complex
            if(Analyzer:sub(Analyzer:length(),Analyzer:length()) == "2" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "3"){
                if(Analyzer:sub(1,4) == "8286"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8287"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8763"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "2879"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "2869"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8769"){makeRune(RUNE_YOK)}
                elseif(Analyzer:sub(1,4) == "8289"){makeRune(RUNE_YOK)}

            }
            if(Analyzer:sub(Analyzer:length(),Analyzer:length()) == "2" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "1" || Analyzer:sub(Analyzer:length(),Analyzer:length()) == "4"){
                if(Analyzer:sub(1,5) == "82689"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,4) == "8281"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "632"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "642"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "624"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "214"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "684"){makeRune(RUNE_TAAR)}
                elseif(Analyzer:sub(1,3) == "826" && Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "674"){makeRune(RUNE_TAAR)}

            }
            if(Analyzer:sub(Analyzer:length()-3,Analyzer:length()) == "4698" || Analyzer:sub(Analyzer:length()-3,Analyzer:length()) == "9874" || Analyzer:sub(Analyzer:length()-3,Analyzer:length()) ==  "8687"){
                    if(Analyzer:sub(1,4) == "8298"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "8287"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "2987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "6987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "874"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "874"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(Analyzer:length()-2,Analyzer:length()) == "987"){makeRune(RUNE_VISTA)}
                    elseif(Analyzer:sub(1,4) == "4848"){makeRune(RUNE_VISTA)}
            }
            # Simple
            switch(Analyzer){
                case "826", makeRune(RUNE_AAM) break       # AAM [ RIGHT ]
                case "262", makeRune(RUNE_VITAE) break     # VITAE [ RIGHT UP ] 
                case "828", makeRune(RUNE_RHAA) break      # RHAA [ DOWN ]
                case "82", makeRune(RUNE_MEGA) break       # MEGA [ UP ]
                case "86", makeRune(RUNE_TAAR) break       # TAAR
                case "4", makeRune(RUNE_TAAR) break       # TAAR
                case "84", makeRune(RUNE_TAAR) break       # TAAR
            }
            
        }
    }
    
    # Loop
    timer("analysis",32)
}

# Draw Flares
if(clk("drawpoints")){
    if(perf()){    
        local MOUSE1 = owner():keyAttack1()
        local C = owner():keyPressed("c")
        
        # When Mouse1 is held....
        if(MOUSE1 && C && perf(7)){
            # Move Holo to Path
            rangerFlags("W")
            holoPos(977,rangerOffset(55, owner():shootPos(), owner():eye()):pos()+vec(0,0,5))
        }
    }
    # Loop
    timer("drawpoints",1)
}

# Check Portals
if(clk("portals")){
    if(perf()){
        local PORTAL1 = holoEntity(844)
        local PORTAL2 = holoEntity(845)
        # PORTAL 1
        if(PORTAL1:isValid() && PORTAL2:isValid()){
            if(Chair1:driver():isPlayer()){
                Chair1:setPos(PORTAL2:pos())
            }else{
                Chair1:setPos(PORTAL1:pos())
                Chair1:setAng(PORTAL1:angles())      
            }
            if(Chair1:pos():distance(PORTAL2:pos()) < 180){
                Chair1:ejectPod()
                Chair1:setPos(PORTAL1:pos())
                Chair1:setAng(PORTAL1:angles())
            }
            
            # PORTAL 2    
            if(Chair2:driver():isPlayer()){
                Chair2:setPos(PORTAL1:pos())
            }else{
                Chair2:setPos(PORTAL2:pos())
                Chair2:setAng(PORTAL2:angles())
                
            }
            if(Chair2:pos():distance(PORTAL1:pos()) < 180){
                Chair2:ejectPod()
                Chair2:setPos(PORTAL2:pos())
                Chair2:setAng(PORTAL2:angles())
            }
        }
    }
    timer("portals",100)
}

# Move Projectiles and Collision Check
if(clk("projectiles")){
    if(perf()){
        for(I=773,790){
            if(holoEntity(I):isValid()){
                holoPos(I,holoEntity(I):toWorld(vec(200,0,0)))
                rangerFilter(array(owner(),holoEntity(I)))
                for(X=773,790){
                    rangerFilter(holoEntity(X))
                }
                local RA = rangerOffset(22, holoEntity(I):toWorld(vec(-11,0,0)), holoEntity(I):toWorld(vec(11,0,0)))
                if(holoEntity(I):pos():distance(Shootpos) < 222 || RA:hit()){
                    explo(holoEntity(I):pos())
                    holoDelete(I)
                }
            }
        }
    }
    timer("projectiles",100)
}

# Projectile re-explode workaround for when propCanCreate returns false, that way we get the maximum load, still.
if(clkName():find("re_explo")){
    if(perf()){
        # Break up the clkName() that holds the informations about the vectors
        local Parse = clkName():explode(";")
        
        # Remove the identifier (1)
        Parse:remove(1)
        
        # Make the rest into a vector
        local ReVec = vec(Parse[1,string]:toNumber(),Parse[2,string]:toNumber(),Parse[3,string]:toNumber())
        
        # Same procedure as before, if we can spawn, dew it, if not, re-loop.
        if(propCanCreate()){
            propSpawn("models/props_phx/torpedo.mdl",ReVec,ang(0,0,0),1):propBreak()
        }else{
            timer(clkName(),250)
        }
    }
}
##### END TIMERS #####

#[

NOTES:

> is to the right
^ is up

One can get the dirs from the eye dir as such:

#local X = owner():eye():y() # >
#local Y = owner():eye():z() # ^

]#
